
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <helper_cuda.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#include "stdafx.h"
#include <ctime>
#include <sstream>
#include <stdio.h>
#include <iostream>
#include <iomanip>      // std::setfill, std::setw
#include <array>

struct DugumNokta
{
	int Dgm[14];
};
struct Cof12
{
	double Memb[12];
};
struct M3x66
{
	double SG11[6][6]; //SG11
	double SG12[6][6]; //SG12
	//double SG21[6][6]; //SG21		//değişti?
	double SG22[6][6]; //SG22
};
struct M4x66
{
	double SG11[6][6]; //SG11
	double SG12[6][6]; //SG12
	double SG21[6][6]; //SG21
	double SG22[6][6]; //SG22
};

struct Eleman
{
	int d1;
	int d2;
	int mesnet;
	int uzunluk;
};

struct M6x6
{
	double M6[6][6];
};
void S_TamYap(int dugumsayisi, int *S);
void MatTopla6x6(M6x6 &girdi, double(*girdi2)[6]);
void Yapi_oku(M4x66 *SG_m, M6x6 **SMatrix, Eleman *Y_Eleman, int Dugum_sayisi, int Eleman_sayisi, DugumNokta *DGM_N);
void set_SM(int a, int b, double val, double *SMMAT);
double get_SM(int a, int b, double *SMMAT);
__device__ __host__ M3x66 gpu_SG(M3x66 SGs, Cof12 Cofes, int i);
__device__ __host__ double SG(int x, int y, M3x66 SGs);
__global__ void gpu_SM(int j, int M1, int M2, int SMwidth, double *SMFlat, M3x66 *SG12x12);

using namespace std;

void cpu_HALFsm(int *M1, int *M2, Cof12 *Cofes, M3x66 *SG12x12, double *SMFlat, int Dugum_noktasi, int cubuk_sayisi)
{
	//int i = blockIdx.x *blockDim.x + threadIdx.x;

	int SMwidth = Dugum_noktasi * 6;
	for (int i = 0; i < cubuk_sayisi; i++)
	{
		SG12x12[0] = gpu_SG(SG12x12[0], Cofes[i], i);
		//printf("sg11=%f", SG12x12[0].SG11[1][1]);
		//printf("m1=%d", M1[i]);
		for (int j = 0; j < 6; j++)
		{
			for (int k = 0; k < 6; k++)
			{
				SMFlat[((((M1[i] - 1))*Dugum_noktasi*(6 * 6)) + (((M1[i] - 1)) * 6)) + ((j * 6 * Dugum_noktasi) + k)] += SG(j, k, SG12x12[0]);	//SG11
				SMFlat[((((M2[i] - 1))*Dugum_noktasi*(6 * 6)) + (((M2[i] - 1)) * 6)) + ((j * 6 * Dugum_noktasi) + k)] += SG(j + 6, k + 6, SG12x12[0]);	//SG22

				SMFlat[((((M1[i] - 1))*Dugum_noktasi*(6 * 6)) + (((M2[i] - 1)) * 6)) + ((j * 6 * Dugum_noktasi) + k)] += SG(j, k + 6, SG12x12[0]);	//SG12
				SMFlat[((((M2[i] - 1))*Dugum_noktasi*(6 * 6)) + (((M1[i] - 1)) * 6)) + ((j * 6 * Dugum_noktasi) + k)] += SG(j + 6, k, SG12x12[0]);	//SG21
			}
			//gpu_SM <<<1,6>>>  (j, M1[i], M2[i], SMwidth, SMFlat, SG12x12);
		}
		//printf("sg11=%f", SG12x12[0].SG11[0][i]);
	}
}

__device__ __host__ double SG(int x, int y, M3x66 SGs)
{
	if ((x < 6) & (y < 6)) {
		return SGs.SG11[x][y];
	}	//SG11
	if ((x < 6) & (y >= 6)) {
		return SGs.SG12[x][y - 6];
	} //SG12
	if ((x >= 6) & (y < 6)) {
		return SGs.SG12[x - 6][y];
	} //SG21
	if ((x >= 6) & (y >= 6)) {
		return SGs.SG22[x - 6][y - 6];
	} //SG22
	return 0;
}

__global__ void gpu_HALFsm(int *M1, int *M2, Cof12 *Cofes, M3x66 *SG12x12, double *SMFlat, int Dugum_noktasi, int cubuk_sayisi)
{
	//int i = blockIdx.x *blockDim.x + threadIdx.x;

	int SMwidth = Dugum_noktasi * 6;
	for (int i = 0; i < cubuk_sayisi; i++)
	{
		SG12x12[0] = gpu_SG(SG12x12[0], Cofes[i], i);
		//printf("sg11=%f", SG12x12[0].SG11[1][1]);
		printf("m1=%d", M1[i]);
		for (int j = 0; j < 6; j++)
		{
			for (int k = 0; k < 6; k++)
			{
				SMFlat[(M1[i] - 1)*SMwidth * 6 + 6 * (M1[i] - 1) + j * SMwidth + k] += SG(j, k, SG12x12[0]);	//SG11
				SMFlat[(M2[i] - 1)*SMwidth * 6 + 6 * (M2[i] - 1) + (j + 6) * SMwidth + (k + 6)] += SG(j + 6, k + 6, SG12x12[0]);	//SG22

				SMFlat[(M1[i] - 1)*SMwidth * 6 + 6 * (M2[i] - 1) + j * SMwidth + (k + 6)] += SG(j, k + 6, SG12x12[0]);	//SG12
				SMFlat[(M2[i] - 1)*SMwidth * 6 + 6 * (M1[i] - 1) + (j + 6) * SMwidth + k] += SG(j + 6, k, SG12x12[0]);	//SG21
			}
			//gpu_SM <<<1,6>>>  (j, M1[i], M2[i], SMwidth, SMFlat, SG12x12);
		}
		//printf("sg11=%f", SG12x12[0].SG11[0][i]);
	}
}

__global__ void gpu_SM(int j, int M1, int M2, int SMwidth, double *SMFlat, M3x66 *SG12x12)
{
	int k = blockIdx.x *blockDim.x + threadIdx.x;
	//for (int k = 0; k < 6; k++)
	{
		SMFlat[(M1 - 1)*SMwidth * 6 + 6 * (M2 - 1) + j * SMwidth + k] += SG(j, k, SG12x12[0]);	//SG11
		SMFlat[(M1 - 1)*SMwidth * 6 + 6 * (M2 - 1) + (j + 6) * SMwidth + (k + 6)] += SG(j + 6, k + 6, SG12x12[0]);	//SG22

		SMFlat[(M1 - 1)*SMwidth * 6 + 6 * (M2 - 1) + j * SMwidth + (k + 6)] += SG(j, k + 6, SG12x12[0]);	//SG12
		SMFlat[(M1 - 1)*SMwidth * 6 + 6 * (M2 - 1) + (j + 6) * SMwidth + k] += SG(j + 6, k, SG12x12[0]);	//SG21
	}
}

__device__ __host__ M3x66 gpu_SG(M3x66 SGs, Cof12 Cofes, int i) // (double *SG,COF12 *COFS,INT CUBUK_NO) -> SG(12X12)
{
	//__global__ void gpu_M2(Cof12 *Cofes, M4x66 *MSONUC2)

		//int i = blockIdx.x *blockDim.x + threadIdx.x;

	//double AL_V = Cofes[i].Memb[0];
	//double BET_V = Cofes[i].Memb[1];
	//double GM_V = Cofes[i].Memb[2];
	//printf("sg11=%f", Cofes.Memb[1]);

	double A_V = Cofes.Memb[3];
	double IX_V = Cofes.Memb[4];
	double IY_V = Cofes.Memb[5];
	double J_V = Cofes.Memb[6];
	double PIX_V = Cofes.Memb[7];
	double PIY_V = Cofes.Memb[8];
	double L_V = Cofes.Memb[9];
	double EL = Cofes.Memb[10];
	double GA = Cofes.Memb[11];


	double SINBETA = sin(Cofes.Memb[1]);
	double COSBETA = cos(Cofes.Memb[1]);
	double SINGAMMA = sin(Cofes.Memb[2]);
	double COSGAMMA = cos(Cofes.Memb[2]);
	double SINALFA = sin(Cofes.Memb[0]);
	double COSALFA = cos(Cofes.Memb[0]);

	// SG11 - 1.S U T U N ====================================

	SGs.SG11[0][0] = (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*
		(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG11[0][1] = (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG11[0][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA) / L_V;

	SGs.SG11[0][3] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	SGs.SG11[0][4] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG11[0][5] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG11 - 2.S U T U N ====================================

	SGs.SG11[1][0] = SGs.SG11[0][1];

	SGs.SG11[1][1] = (A_V*EL*SINBETA*SINBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG11[1][2] = (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSBETA*SINALFA*SINBETA)
		/ L_V - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG11[1][3] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1));

	SGs.SG11[1][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA)
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1));

	SGs.SG11[1][5] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG11 - 3.S U T U N ====================================

	SGs.SG11[2][0] = SGs.SG11[0][2];

	SGs.SG11[2][1] = SGs.SG11[1][2];

	SGs.SG11[2][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	SGs.SG11[2][3] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	SGs.SG11[2][4] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG11[2][5] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG11 - 4.S U T U N ====================================

	SGs.SG11[3][0] = SGs.SG11[0][3];

	SGs.SG11[3][1] = SGs.SG11[1][3];

	SGs.SG11[3][2] = SGs.SG11[2][3];

	SGs.SG11[3][3] = (EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG11[3][4] = (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (EL*IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	SGs.SG11[3][5] = (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// SG11 - 5.S U T U N ====================================

	SGs.SG11[4][0] = SGs.SG11[0][4];

	SGs.SG11[4][1] = SGs.SG11[1][4];

	SGs.SG11[4][2] = SGs.SG11[2][4];

	SGs.SG11[4][3] = SGs.SG11[3][4];

	SGs.SG11[4][4] = (GA*J_V*SINBETA*SINBETA) / L_V + (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V + 4)) / (L_V*(PIY_V + 1))
		+ (EL*IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	SGs.SG11[4][5] = (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		- (EL*IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	// SG11 - 6.S U T U N ====================================

	SGs.SG11[5][0] = SGs.SG11[0][5];

	SGs.SG11[5][1] = SGs.SG11[1][5];

	SGs.SG11[5][2] = SGs.SG11[2][5];

	SGs.SG11[5][3] = SGs.SG11[3][5];

	SGs.SG11[5][4] = SGs.SG11[4][5];

	SGs.SG11[5][5] = (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		+ (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// =======================================================
	// SG12 - 1.S U T U N ====================================

	SGs.SG12[0][0] = -(12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		- (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG12[1][0] = (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V;

	SGs.SG12[2][0] = (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA)
		/ L_V - (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1))
		- (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1));

	SGs.SG12[3][0] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	SGs.SG12[4][0] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG12[5][0] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG12 - 2.S U T U N ====================================

	SGs.SG12[0][1] = (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSALFA*COSBETA*SINBETA) / L_V;

	SGs.SG12[1][1] = -(A_V*EL*SINBETA*SINBETA) / L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG12[2][1] = (A_V*EL*COSBETA*SINALFA*SINBETA)
		/ L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG12[3][1] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	SGs.SG12[4][1] = (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*(PIY_V + 1))
		- (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1));

	SGs.SG12[5][1] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG12 - 3.S U T U N ====================================

	SGs.SG12[0][2] = (A_V*EL*COSALFA*COSBETA*COSBETA*SINALFA)
		/ L_V - (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1))
		- (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1));

	SGs.SG12[1][2] = (A_V*EL*SINBETA*COSBETA*SINALFA)
		/ L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG12[2][2] = -(12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		- (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	SGs.SG12[3][2] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	SGs.SG12[4][2] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG12[5][2] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG12 - 4.S U T U N ====================================

	SGs.SG12[0][3] = (6 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG12[1][3] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	SGs.SG12[2][3] = (6 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG12[3][3] = -(IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG12[4][3] = (IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		- (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	SGs.SG12[5][3] = (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		- (IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	// SG12 - 5.S U T U N ====================================

	SGs.SG12[0][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG12[1][4] = (6 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA)
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIY_V + 1));

	SGs.SG12[2][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG12[3][4] = (IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSALFA*COSBETA*SINBETA) / L_V
		- (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	SGs.SG12[4][4] = -(GA*J_V*SINBETA*SINBETA) / L_V - (IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	SGs.SG12[5][4] = (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		+ (IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	// SG12 - 6.S U T U N ====================================

	SGs.SG12[0][5] = (6 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG12[1][5] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	SGs.SG12[2][5] = (6 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG12[3][5] = (GA*J_V*COSALFA*COSBETA*COSBETA*SINALFA) / L_V
		- (IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	SGs.SG12[4][5] = (GA*J_V*SINBETA*COSBETA*SINALFA) / L_V
		+ (IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	SGs.SG12[5][5] = -(IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		- (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	// =======================================================
	// SG21 - 1.S U T U N ====================================



	// =======================================================
	// SG22 - 1.S U T U N ====================================

	SGs.SG22[0][0] = (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG22[0][1] = (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V
		+ (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG22[0][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA) / L_V;

	SGs.SG22[0][3] = (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG22[0][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG22[0][5] = (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	// SG22 - 2.S U T U N ====================================

	SGs.SG22[1][0] = SGs.SG22[0][1];

	SGs.SG22[1][1] = (A_V*EL*SINBETA*SINBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG22[1][2] = (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSBETA*SINALFA*SINBETA) / L_V
		- (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	SGs.SG22[1][3] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	SGs.SG22[1][4] = (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1))
		- (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*(PIY_V + 1));

	SGs.SG22[1][5] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG22 - 3.S U T U N ====================================

	SGs.SG22[2][0] = SGs.SG22[0][2];

	SGs.SG22[2][1] = SGs.SG22[1][2];

	SGs.SG22[2][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	SGs.SG22[2][3] = (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	SGs.SG22[2][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	SGs.SG22[2][5] = (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	// SG22 - 4.S U T U N ====================================

	SGs.SG22[3][0] = SGs.SG22[0][3];

	SGs.SG22[3][1] = SGs.SG22[1][3];

	SGs.SG22[3][2] = SGs.SG22[2][3];

	SGs.SG22[3][3] = (EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	SGs.SG22[3][4] = (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4)) / (L_V*(PIY_V + 1))
		- (EL*IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	SGs.SG22[3][5] = (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// SG22 - 5.S U T U N ====================================

	SGs.SG22[4][0] = SGs.SG22[0][4];

	SGs.SG22[4][1] = SGs.SG22[1][4];

	SGs.SG22[4][2] = SGs.SG22[2][4];

	SGs.SG22[4][3] = SGs.SG22[3][4];

	SGs.SG22[4][4] = (GA*J_V*SINBETA*SINBETA) / L_V + (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (EL*IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	SGs.SG22[4][5] = (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		- (EL*IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	// SG22 - 6.S U T U N ====================================

	SGs.SG22[5][0] = SGs.SG22[0][5];

	SGs.SG22[5][1] = SGs.SG22[1][5];

	SGs.SG22[5][2] = SGs.SG22[2][5];

	SGs.SG22[5][3] = SGs.SG22[3][5];

	SGs.SG22[5][4] = SGs.SG22[4][5];

	SGs.SG22[5][5] = (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		+ (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	return SGs;
	//printf("  -sg11=%f-  ", SGs.SG11[1][1]);
}

__global__ void gpu_M2(Cof12 *Cofes, M4x66 *MSONUC2)
{
	int i = blockIdx.x *blockDim.x + threadIdx.x;

	//double AL_V = Cofes[i].Memb[0];
	//double BET_V = Cofes[i].Memb[1];
	//double GM_V = Cofes[i].Memb[2];
	double A_V = Cofes[i].Memb[3];
	double IX_V = Cofes[i].Memb[4];
	double IY_V = Cofes[i].Memb[5];
	double J_V = Cofes[i].Memb[6];
	double PIX_V = Cofes[i].Memb[7];
	double PIY_V = Cofes[i].Memb[8];
	double L_V = Cofes[i].Memb[9];
	double EL = Cofes[i].Memb[10];
	double GA = Cofes[i].Memb[11];


	double SINBETA = sin(Cofes[i].Memb[1]);
	double COSBETA = cos(Cofes[i].Memb[1]);
	double SINGAMMA = sin(Cofes[i].Memb[2]);
	double COSGAMMA = cos(Cofes[i].Memb[2]);
	double SINALFA = sin(Cofes[i].Memb[0]);
	double COSALFA = cos(Cofes[i].Memb[0]);

	//printf("thread=%d", i);
	//printf("\n");

	// SG11 - 1.S U T U N ====================================

	MSONUC2[i].SG11[0][0] = (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*
		(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG11[0][1] = (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[0][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG11[0][3] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[0][4] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG11[0][5] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG11 - 2.S U T U N ====================================

	MSONUC2[i].SG11[1][0] = MSONUC2[i].SG11[0][1];

	MSONUC2[i].SG11[1][1] = (A_V*EL*SINBETA*SINBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[1][2] = (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSBETA*SINALFA*SINBETA)
		/ L_V - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[1][3] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[1][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA)
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG11[1][5] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG11 - 3.S U T U N ====================================

	MSONUC2[i].SG11[2][0] = MSONUC2[i].SG11[0][2];

	MSONUC2[i].SG11[2][1] = MSONUC2[i].SG11[1][2];

	MSONUC2[i].SG11[2][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	MSONUC2[i].SG11[2][3] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG11[2][4] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG11[2][5] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG11 - 4.S U T U N ====================================

	MSONUC2[i].SG11[3][0] = MSONUC2[i].SG11[0][3];

	MSONUC2[i].SG11[3][1] = MSONUC2[i].SG11[1][3];

	MSONUC2[i].SG11[3][2] = MSONUC2[i].SG11[2][3];

	MSONUC2[i].SG11[3][3] = (EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG11[3][4] = (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (EL*IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	MSONUC2[i].SG11[3][5] = (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// SG11 - 5.S U T U N ====================================

	MSONUC2[i].SG11[4][0] = MSONUC2[i].SG11[0][4];

	MSONUC2[i].SG11[4][1] = MSONUC2[i].SG11[1][4];

	MSONUC2[i].SG11[4][2] = MSONUC2[i].SG11[2][4];

	MSONUC2[i].SG11[4][3] = MSONUC2[i].SG11[3][4];

	MSONUC2[i].SG11[4][4] = (GA*J_V*SINBETA*SINBETA) / L_V + (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V + 4)) / (L_V*(PIY_V + 1))
		+ (EL*IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	MSONUC2[i].SG11[4][5] = (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		- (EL*IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	// SG11 - 6.S U T U N ====================================

	MSONUC2[i].SG11[5][0] = MSONUC2[i].SG11[0][5];

	MSONUC2[i].SG11[5][1] = MSONUC2[i].SG11[1][5];

	MSONUC2[i].SG11[5][2] = MSONUC2[i].SG11[2][5];

	MSONUC2[i].SG11[5][3] = MSONUC2[i].SG11[3][5];

	MSONUC2[i].SG11[5][4] = MSONUC2[i].SG11[4][5];

	MSONUC2[i].SG11[5][5] = (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		+ (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// =======================================================
	// SG12 - 1.S U T U N ====================================

	MSONUC2[i].SG12[0][0] = -(12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		- (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG12[1][0] = (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG12[2][0] = (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA)
		/ L_V - (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1))
		- (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[3][0] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[4][0] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[5][0] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG12 - 2.S U T U N ====================================

	MSONUC2[i].SG12[0][1] = (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSALFA*COSBETA*SINBETA) / L_V;

	MSONUC2[i].SG12[1][1] = -(A_V*EL*SINBETA*SINBETA) / L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[2][1] = (A_V*EL*COSBETA*SINALFA*SINBETA)
		/ L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[3][1] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[4][1] = (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*(PIY_V + 1))
		- (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[5][1] = (6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) + (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG12 - 3.S U T U N ====================================

	MSONUC2[i].SG12[0][2] = (A_V*EL*COSALFA*COSBETA*COSBETA*SINALFA)
		/ L_V - (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1))
		- (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[1][2] = (A_V*EL*SINBETA*COSBETA*SINALFA)
		/ L_V - (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[2][2] = -(12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		- (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	MSONUC2[i].SG12[3][2] = (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[4][2] = -(6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[5][2] = (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1));

	// SG12 - 4.S U T U N ====================================

	MSONUC2[i].SG12[0][3] = (6 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[1][3] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[2][3] = (6 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[3][3] = -(IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG12[4][3] = (IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		- (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	MSONUC2[i].SG12[5][3] = (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		- (IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	// SG12 - 5.S U T U N ====================================

	MSONUC2[i].SG12[0][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[1][4] = (6 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA)
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[2][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[3][4] = (IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSALFA*COSBETA*SINBETA) / L_V
		- (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	MSONUC2[i].SG12[4][4] = -(GA*J_V*SINBETA*SINBETA) / L_V - (IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	MSONUC2[i].SG12[5][4] = (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		+ (IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	// SG12 - 6.S U T U N ====================================

	MSONUC2[i].SG12[0][5] = (6 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[1][5] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG12[2][5] = (6 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG12[3][5] = (GA*J_V*COSALFA*COSBETA*COSBETA*SINALFA) / L_V
		- (IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	MSONUC2[i].SG12[4][5] = (GA*J_V*SINBETA*COSBETA*SINALFA) / L_V
		+ (IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2)) / (L_V*(PIX_V + 1))
		- (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2)) / (L_V*(PIY_V + 1));

	MSONUC2[i].SG12[5][5] = -(IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V - 2))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		- (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V - 2))
		/ (L_V*(PIY_V + 1));

	// =======================================================
	// SG21 - 1.S U T U N ====================================

	MSONUC2[i].SG21[0][0] = MSONUC2[i].SG12[0][0];

	MSONUC2[i].SG21[1][0] = MSONUC2[i].SG12[0][1];

	MSONUC2[i].SG21[2][0] = MSONUC2[i].SG12[0][2];

	MSONUC2[i].SG21[3][0] = MSONUC2[i].SG12[0][3];

	MSONUC2[i].SG21[4][0] = MSONUC2[i].SG12[0][4];

	MSONUC2[i].SG21[5][0] = MSONUC2[i].SG12[0][5];


	// SG21 - 2.S U T U N ====================================

	MSONUC2[i].SG21[0][1] = MSONUC2[i].SG12[1][0];

	MSONUC2[i].SG21[1][1] = MSONUC2[i].SG12[1][1];

	MSONUC2[i].SG21[2][1] = MSONUC2[i].SG12[1][2];

	MSONUC2[i].SG21[3][1] = MSONUC2[i].SG12[1][3];

	MSONUC2[i].SG21[4][1] = MSONUC2[i].SG12[1][4];

	MSONUC2[i].SG21[5][1] = MSONUC2[i].SG12[1][5];


	// SG21 - 3.S U T U N ====================================

	MSONUC2[i].SG21[0][2] = MSONUC2[i].SG12[2][0];

	MSONUC2[i].SG21[1][2] = MSONUC2[i].SG12[2][1];

	MSONUC2[i].SG21[2][2] = MSONUC2[i].SG12[2][2];

	MSONUC2[i].SG21[3][2] = MSONUC2[i].SG12[2][3];

	MSONUC2[i].SG21[4][2] = MSONUC2[i].SG12[2][4];

	MSONUC2[i].SG21[5][2] = MSONUC2[i].SG12[2][5];


	// SG21 - 4.S U T U N ====================================

	MSONUC2[i].SG21[0][3] = MSONUC2[i].SG12[3][0];

	MSONUC2[i].SG21[1][3] = MSONUC2[i].SG12[3][1];

	MSONUC2[i].SG21[2][3] = MSONUC2[i].SG12[3][2];

	MSONUC2[i].SG21[3][3] = MSONUC2[i].SG12[3][3];

	MSONUC2[i].SG21[4][3] = MSONUC2[i].SG12[3][4];

	MSONUC2[i].SG21[5][3] = MSONUC2[i].SG12[3][5];


	// SG21 - 5.S U T U N ====================================

	MSONUC2[i].SG21[0][4] = MSONUC2[i].SG12[4][0];

	MSONUC2[i].SG21[1][4] = MSONUC2[i].SG12[4][1];

	MSONUC2[i].SG21[2][4] = MSONUC2[i].SG12[4][2];

	MSONUC2[i].SG21[3][4] = MSONUC2[i].SG12[4][3];

	MSONUC2[i].SG21[4][4] = MSONUC2[i].SG12[4][4];

	MSONUC2[i].SG21[5][4] = MSONUC2[i].SG12[4][5];


	// SG21 - 6.S U T U N ====================================

	MSONUC2[i].SG21[0][5] = MSONUC2[i].SG12[5][0];

	MSONUC2[i].SG21[1][5] = MSONUC2[i].SG12[5][1];

	MSONUC2[i].SG21[2][5] = MSONUC2[i].SG12[5][2];

	MSONUC2[i].SG21[3][5] = MSONUC2[i].SG12[5][3];

	MSONUC2[i].SG21[4][5] = MSONUC2[i].SG12[5][4];

	MSONUC2[i].SG21[5][5] = MSONUC2[i].SG12[5][5];


	// =======================================================
	// SG22 - 1.S U T U N ====================================

	MSONUC2[i].SG22[0][0] = (12 * EL*IX_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG22[0][1] = (A_V*EL*SINBETA*COSALFA*COSBETA) / L_V
		+ (12 * EL*IX_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (12 * EL*IY_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG22[0][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) - (A_V*EL*COSBETA*SINALFA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG22[0][3] = (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG22[0][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG22[0][5] = (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	// SG22 - 2.S U T U N ====================================

	MSONUC2[i].SG22[1][0] = MSONUC2[i].SG22[0][1];

	MSONUC2[i].SG22[1][1] = (A_V*EL*SINBETA*SINBETA) / L_V + (12 * EL*IX_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA)
		/ (L_V*L_V*L_V*(PIX_V + 1)) + (12 * EL*IY_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG22[1][2] = (12 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1)) - (A_V*EL*COSBETA*SINALFA*SINBETA) / L_V
		- (12 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)) / (L_V*L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG22[1][3] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG22[1][4] = (6 * EL*IX_V*COSBETA*SINGAMMA*COSBETA*COSGAMMA) / (L_V*L_V*(PIX_V + 1))
		- (6 * EL*IY_V*COSBETA*COSGAMMA*COSBETA*SINGAMMA) / (L_V*L_V*(PIY_V + 1));

	MSONUC2[i].SG22[1][5] = -(6 * EL*IX_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIX_V + 1)) - (6 * EL*IY_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIY_V + 1));

	// SG22 - 3.S U T U N ====================================

	MSONUC2[i].SG22[2][0] = MSONUC2[i].SG22[0][2];

	MSONUC2[i].SG22[2][1] = MSONUC2[i].SG22[1][2];

	MSONUC2[i].SG22[2][2] = (12 * EL*IX_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*L_V*(PIX_V + 1))
		+ (12 * EL*IY_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*L_V*(PIY_V + 1)) + (A_V*EL*COSBETA*SINALFA*COSBETA*SINALFA) / L_V;

	MSONUC2[i].SG22[2][3] = (6 * EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG22[2][4] = (6 * EL*IY_V*COSBETA*COSGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) + (6 * EL*IX_V*COSBETA*SINGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)) / (L_V*L_V*(PIX_V + 1));

	MSONUC2[i].SG22[2][5] = (6 * EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA))
		/ (L_V*L_V*(PIY_V + 1)) - (6 * EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA))
		/ (L_V*L_V*(PIX_V + 1));

	// SG22 - 4.S U T U N ====================================

	MSONUC2[i].SG22[3][0] = MSONUC2[i].SG22[0][3];

	MSONUC2[i].SG22[3][1] = MSONUC2[i].SG22[1][3];

	MSONUC2[i].SG22[3][2] = MSONUC2[i].SG22[2][3];

	MSONUC2[i].SG22[3][3] = (EL*IX_V*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (GA*J_V*COSALFA*COSBETA*COSALFA*COSBETA) / L_V;

	MSONUC2[i].SG22[3][4] = (GA*J_V*SINBETA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*COSBETA*COSGAMMA*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4)) / (L_V*(PIY_V + 1))
		- (EL*IX_V*COSBETA*SINGAMMA*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	MSONUC2[i].SG22[3][5] = (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSGAMMA*SINALFA + COSALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) - (GA*J_V*COSBETA*SINALFA*COSALFA*COSBETA) / L_V
		+ (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(SINALFA*SINGAMMA - COSALFA * COSGAMMA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));

	// SG22 - 5.S U T U N ====================================

	MSONUC2[i].SG22[4][0] = MSONUC2[i].SG22[0][4];

	MSONUC2[i].SG22[4][1] = MSONUC2[i].SG22[1][4];

	MSONUC2[i].SG22[4][2] = MSONUC2[i].SG22[2][4];

	MSONUC2[i].SG22[4][3] = MSONUC2[i].SG22[3][4];

	MSONUC2[i].SG22[4][4] = (GA*J_V*SINBETA*SINBETA) / L_V + (EL*IY_V*COSBETA*COSGAMMA*COSBETA*COSGAMMA*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) + (EL*IX_V*COSBETA*SINGAMMA*COSBETA*SINGAMMA*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	MSONUC2[i].SG22[4][5] = (EL*IY_V*COSBETA*COSGAMMA*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1)) - (GA*J_V*COSBETA*SINALFA*SINBETA) / L_V
		- (EL*IX_V*COSBETA*SINGAMMA*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4)) / (L_V*(PIX_V + 1));

	// SG22 - 6.S U T U N ====================================

	MSONUC2[i].SG22[5][0] = MSONUC2[i].SG22[0][5];

	MSONUC2[i].SG22[5][1] = MSONUC2[i].SG22[1][5];

	MSONUC2[i].SG22[5][2] = MSONUC2[i].SG22[2][5];

	MSONUC2[i].SG22[5][3] = MSONUC2[i].SG22[3][5];

	MSONUC2[i].SG22[5][4] = MSONUC2[i].SG22[4][5];

	MSONUC2[i].SG22[5][5] = (GA*J_V*COSBETA*SINALFA*COSBETA*SINALFA) / L_V
		+ (EL*IX_V*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(COSALFA*COSGAMMA - SINALFA * SINBETA*SINGAMMA)*(PIX_V + 4))
		/ (L_V*(PIX_V + 1)) + (EL*IY_V*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(COSALFA*SINGAMMA + COSGAMMA * SINALFA*SINBETA)*(PIY_V + 4))
		/ (L_V*(PIY_V + 1));


	//printf("thread=%d", i);
	//for (int jj = 0; jj < 12; jj++)
	//{
	////int jj = 10;
	//	for (int ii = 0; ii < 12; ii++)
	//	{
	//		//printf("coef[%d]=%f\n", i, Cofes[i].M9[i]);
	//		printf("MSONUC[%d].M12[%d][%d]=%e\n", i,jj, ii, MSONUC[i].M12[jj][ii]);
	//	}
	//	printf("\n");
	//}
}

int main()
{
	cudaError_t cudaStatus;
	//cudaError_t error;
	cudaEvent_t start, stop;

	// Allocate CUDA events that we'll use for timing
	checkCudaErrors(cudaEventCreate(&start));
	checkCudaErrors(cudaEventCreate(&stop));

	// =======================================================
	// Çubuk veri giriþi =====================================

	Eleman *Yapi_elemanlari;
	Yapi_elemanlari = (Eleman*)malloc(sizeof(Eleman) * 12);

	Yapi_elemanlari[0].d1 = 1; Yapi_elemanlari[0].d2 = 2; Yapi_elemanlari[0].mesnet = 0; Yapi_elemanlari[0].uzunluk = 10;
	Yapi_elemanlari[1].d1 = 3; Yapi_elemanlari[1].d2 = 4; Yapi_elemanlari[1].mesnet = 0; Yapi_elemanlari[1].uzunluk = 10;
	Yapi_elemanlari[2].d1 = 5; Yapi_elemanlari[2].d2 = 6; Yapi_elemanlari[2].mesnet = 0; Yapi_elemanlari[2].uzunluk = 10;
	Yapi_elemanlari[3].d1 = 7; Yapi_elemanlari[3].d2 = 8; Yapi_elemanlari[3].mesnet = 0; Yapi_elemanlari[3].uzunluk = 10;
	Yapi_elemanlari[4].d1 = 3; Yapi_elemanlari[4].d2 = 1; Yapi_elemanlari[4].mesnet = 0; Yapi_elemanlari[4].uzunluk = 10;
	Yapi_elemanlari[5].d1 = 4; Yapi_elemanlari[5].d2 = 2; Yapi_elemanlari[5].mesnet = 0; Yapi_elemanlari[5].uzunluk = 10;
	Yapi_elemanlari[6].d1 = 5; Yapi_elemanlari[6].d2 = 3; Yapi_elemanlari[6].mesnet = 0; Yapi_elemanlari[6].uzunluk = 10;
	Yapi_elemanlari[7].d1 = 6; Yapi_elemanlari[7].d2 = 4; Yapi_elemanlari[7].mesnet = 0; Yapi_elemanlari[7].uzunluk = 10;
	Yapi_elemanlari[8].d1 = 7; Yapi_elemanlari[8].d2 = 5; Yapi_elemanlari[8].mesnet = 0; Yapi_elemanlari[8].uzunluk = 10;
	Yapi_elemanlari[9].d1 = 8; Yapi_elemanlari[9].d2 = 6; Yapi_elemanlari[9].mesnet = 0; Yapi_elemanlari[9].uzunluk = 10;
	Yapi_elemanlari[10].d1 = 9; Yapi_elemanlari[10].d2 = 7; Yapi_elemanlari[10].mesnet = -1; Yapi_elemanlari[10].uzunluk = 10;
	Yapi_elemanlari[11].d1 = 10; Yapi_elemanlari[11].d2 = 8; Yapi_elemanlari[11].mesnet = -1; Yapi_elemanlari[11].uzunluk = 10;

	int Dugum_sayisi = 10;
	int Cubuk_sayisi = 12;
	// =======================================================

	// =======================================================
	// Düðüm noktalarý bulma =================================
	DugumNokta *Dgm_Noktalari;
	Dgm_Noktalari = (DugumNokta*)malloc(sizeof(DugumNokta)*Dugum_sayisi);
	for (int i = 0; i < Dugum_sayisi; i++)
	{
		for (int j = 0; j < 14; j++) { Dgm_Noktalari[i].Dgm[j] = -1; }
	}

	for (int i = 0; i < Cubuk_sayisi; i++)
	{
		int k = 0;
		for (int j = 0; j < Cubuk_sayisi; j++)
		{
			{
				if (Yapi_elemanlari[j].d1 - 1 == i) { Dgm_Noktalari[i].Dgm[k] = j; k++; };
				if (Yapi_elemanlari[j].d2 - 1 == i) { Dgm_Noktalari[i].Dgm[k] = j; k++; };
			}
		}
	}
	// =======================================================

	// =======================================================
	// Çubuklarýn uç noktalarý vektörel kaydý ================

	int *Y_Eleman_d1, *Y_Eleman_d2;
	int *d_Y_Eleman_d1, *d_Y_Eleman_d2;

	Y_Eleman_d1 = new int[Cubuk_sayisi];
	Y_Eleman_d2 = new int[Cubuk_sayisi];
	for (int i = 0; i < Cubuk_sayisi; i++) { Y_Eleman_d1[i] = Yapi_elemanlari[i].d1; Y_Eleman_d2[i] = Yapi_elemanlari[i].d2; }
	// =======================================================

	// =======================================================
	//GPU hazýrlýðý ==========================================
	const int BLOCK_S = 1; // 24*1020*12 //1875
	int THREAD_S = Cubuk_sayisi; //896 //85*12  ---- 3.243 gb //64*12//768
	const int iter = BLOCK_S * THREAD_S;
	M4x66 *h2_M_snc, *d2_M_snc, *d_M_SG;
	Cof12 *h_coefficents, *d_coefficents;
	M3x66 *h_SG1212, *d_SG1212;

	double *d_SMflat, *h_SMflat;

	h2_M_snc = (M4x66*)malloc(sizeof(M4x66)*iter);
	h_coefficents = (Cof12*)malloc(sizeof(Cof12)*iter);



	for (int i = 0; i < BLOCK_S*THREAD_S; i++) {
		double tempf[12];
		for (int j = 0; j < 12; j++)
		{
			tempf[j] = (j + 1) * 10;
		}
		tempf[9] = 10; tempf[10] = 2.0e8; tempf[11] = 1.0e2;

		memcpy(h_coefficents[i].Memb, tempf, 12 * sizeof(double));
	}



	cudaMalloc((void**)&d_coefficents, iter * sizeof(Cof12));

	cudaMemcpy(d_coefficents, h_coefficents, iter * sizeof(Cof12), cudaMemcpyHostToDevice);


	cudaMalloc((void**)&d2_M_snc, iter * sizeof(M4x66));


	// Record the start event
	checkCudaErrors(cudaEventRecord(start, NULL));


	gpu_M2 << <BLOCK_S, THREAD_S >> > (d_coefficents, d2_M_snc);


	// Record the stop event
	checkCudaErrors(cudaEventRecord(stop, NULL));

	cudaStatus = cudaGetLastError();
	if (cudaStatus != cudaSuccess) {
		fprintf(stderr, "addKernel launch failed: %s\n", cudaGetErrorString(cudaStatus));
		getchar();
	}

	cudaMemcpy(h2_M_snc, d2_M_snc, sizeof(M4x66) * iter, cudaMemcpyDeviceToHost);
	// =======================================================

	// =======================================================
	// Ekrana SM yazdýr ======================================
	cout << endl;

	M6x6 **SM;
	SM = new M6x6*[Dugum_sayisi]; // SM matrix i oluþturuldu.

	double tempd[36];				// 'SM matrix i Sýfýrlanýyor...
	for (int j = 0; j < 36; j++)
	{
		tempd[j] = 0;
	}

	for (int i = 0; i < Dugum_sayisi; i++)
	{
		SM[i] = new M6x6[Dugum_sayisi];
		for (int j = 0; j < Dugum_sayisi; j++)
		{
			for (int ara = 0; ara < Dugum_sayisi; ara++)
			{
				memcpy(SM[i][j].M6, tempd, sizeof(M6x6));
			}
		}
	}   // SM matrix i sýfýrlandý.


	Yapi_oku(h2_M_snc, SM, Yapi_elemanlari, Dugum_sayisi, Cubuk_sayisi, Dgm_Noktalari);


	double **SMM;
	SMM = new double*[Dugum_sayisi * 6];

	double *tempSMM;						// rastgele YK yüklemeleri vektörü
	tempSMM = new double[Dugum_sayisi * 6];
	for (int i = 0; i < Dugum_sayisi * 6; i++) { tempSMM[i] = 0; }

	for (int i = 0; i < Dugum_sayisi * 6; i++)
	{
		SMM[i] = new double[Dugum_sayisi * 6];

		memcpy(SMM[i], tempSMM, Dugum_sayisi * 6 * sizeof(double));
	}

	cout.precision(2);
	for (int n = 0; n < Dugum_sayisi; n++)
	{
		for (int i = 0; i < 6; i++)
		{
			for (int m = 0; m < Dugum_sayisi; m++)
			{
				double *tempSG;
				for (int j = 0; j < 6; j++)
				{
					SMM[n * 6 + i][m * 6 + j] = SM[n][m].M6[i][j];
					std::cout << std::setfill('0') << std::setw(8);
					cout << SM[n][m].M6[i][j] << ",";
				}
			}
			cout << "|" << endl;
		}
	}

	int k = 0; int alpha = 0, betaa = 1;
	cout.precision(2);
	for (int i = 0; i < Dugum_sayisi * 6; i++)				//Ekrana döküm
	{
		if (((i) % 12 == 0))
		{
			cout << ">>" << (i)* Dugum_sayisi * 6 << endl;

			if (alpha == 0) { alpha = 1; betaa = 0; }
			else { alpha = 0; betaa = 1; }
		}

		//for (int t = 0; t < 6; t++)
		{
			for (int g = 0; g < Dugum_sayisi; g++)
			{
				if ((g % 2 == 0)) { k = alpha; }
				else { k = betaa; }
				if (k == 1) { cout << "["; }
				else { cout << "{"; }
				for (int j = 0; j < 6; j++)
				{
					std::cout << std::setfill('0') << std::setw(8);
					cout << SMM[i][j + g * 6] << ",";
				}
				if (k == 1) { cout << "]"; }
				else { cout << "}"; }
			}
		}
		cout << "|" << endl;
	}


	//int *S;
	//S = new int[Dugum_sayisi ];
	//for (int i = 0; i < Dugum_sayisi; i++) {  S[i] = i * (i + 1) / 2; }

	//int p = S[Dugum_sayisi-1], k = Dugum_sayisi -1;
	////p = S[0], k = 0;
	//cout.precision(2);
	//for (int i = 0; i < (Dugum_sayisi * 6 * (Dugum_sayisi * 6 + 1) / 2); i++)
	//{
	//	std::cout << std::setfill('0') << std::setw(8);
	//	cout << h_SMflat[(Dugum_sayisi * 6 * (Dugum_sayisi * 6 + 1) / 2)-1-i] << ",";
	//	if (i == p - 1)
	//	{
	//		k--;
	//		p = S[k];
	//		cout << endl;
	//	}
	//}

	cudaFree(d_coefficents);
	cudaFree(d2_M_snc);

	// Compute and print the performance
	float msecTotal = 0.0f;
	checkCudaErrors(cudaEventElapsedTime(&msecTotal, start, stop));

	printf(
		"Total Time2= %.3f msec\n",
		msecTotal);

}

void S_TamYap(int dugumsayisi, int *S)
{
	for (int i = 0; i < dugumsayisi * 6; i++)
	{
		S[i] = i * (i + 1) / 2;
	}
}

//SM matrix konum tespiti ve oluþturulmasý
void Yapi_oku(M4x66 *SG_m, M6x6 **SMatrix, Eleman *Y_Eleman, int Dugum_sayisi, int Eleman_sayisi, DugumNokta *DGM_N)
{
	//SMatrix[1][1].M6[0][0] = 0;
	for (int i = 0; i < Eleman_sayisi; i++) //eleman sayýsý kadar tekrar eder. mesnetleri SM matrix e eklemek için
	{
		/*if (DGM_N[i].Dgm[1] != -1)*/ {
			MatTopla6x6(SMatrix[Y_Eleman[i].d1 - 1][Y_Eleman[i].d1 - 1], SG_m[i].SG11);
			MatTopla6x6(SMatrix[Y_Eleman[i].d1 - 1][Y_Eleman[i].d2 - 1], SG_m[i].SG12);
			MatTopla6x6(SMatrix[Y_Eleman[i].d2 - 1][Y_Eleman[i].d1 - 1], SG_m[i].SG21);
			MatTopla6x6(SMatrix[Y_Eleman[i].d2 - 1][Y_Eleman[i].d2 - 1], SG_m[i].SG22);
		}
	}
}

//Ýki 6x6 matrix i toplayýp ilkine ekler
void MatTopla6x6(M6x6 &girdi, double(*girdi2)[6])
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
		{
			girdi.M6[i][j] += girdi2[i][j];
		}
	}
}

//Ýki 6x6 matrix i toplayýp ilkine ekler
__device__ void Gpu_MatTopla6x6(int x, int y, double(*girdi2)[6], double *SMMAT)
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
		{
			set_SM(x * 6 + i, y * 6 + j, get_SM(x * 6 + i, y * 6 + j, SMMAT) + girdi2[i][j], SMMAT);
			//girdi.M6[i][j] += girdi2[i][j];
		}
	}
}

__device__ __host__ void set_SM(int a, int b, double val, double *SMMAT)
{
	// simetri
	if (b > a)
	{
		SMMAT[(b*(b + 1) / 2) + a] = val;
	}
	else
	{
		SMMAT[(a*(a + 1) / 2) + b] = val;
	}
}

__device__ __host__ double get_SM(int a, int b, double *SMMAT)
{
	//if (COMP_size= (DugumSayisi * 6 * (DugumSayisi * 6 + 1) / 2))
	// simetri
	if (b > a)
	{
		return SMMAT[(b*(b + 1) / 2) + a];
	}
	else
	{
		return SMMAT[(a*(a + 1) / 2) + b];
	}
}
